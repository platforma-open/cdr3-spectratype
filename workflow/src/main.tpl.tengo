// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

spectratype := assets.importSoftware("@platforma-open/milaboratories.cdr3-spectratype.software:main")

wf.prepare(func(args) {

	clonotypingRunId := args.clonotypingRunId
	scClonotypeChain := args.scClonotypeChain

	query := func(label, readCount) {

		// return {
		// 	type: "Annotation",
		// 	annotation: "pl7.app/label",
		// 	value: label
		// }

		r := {
			type: "And",
			operands:  [
				{
					type: "AnnotationPattern",
					annotation: "pl7.app/label",
					pattern: label
				} , {
					type: "Domain",
					domain: {
						"pl7.app/vdj/clonotypingRunId": clonotypingRunId
					},
					domainExactMatch: false
				}
			]
		}

		if readCount == false {
			r.operands[1].domain["pl7.app/vdj/scClonotypeChain"] = scClonotypeChain
		}

		return r
	}

	return  { 
		cdr3LengthCol: wf.resolve(args.cdr3LengthRef),
		vGeneCol: wf.query(query("Best V gene", false), { single: true }),
		weightCol: wf.query(query("Number Of Reads", true), { single: true })
	}
})

wf.body(func(args) {

	cdr3LengthCol := args.cdr3LengthCol
	vGeneCol := args.vGeneCol
	weightCol := args.weightCol
	
	cdr3LengthLabel := cdr3LengthCol.spec.annotations["pl7.app/label"]
	vGeneLabel := vGeneCol.spec.annotations["pl7.app/label"]
	weightLabel := weightCol.spec.annotations["pl7.app/label"]

	cdr3LengthCol.spec.annotations["pl7.app/label"] = "cdr3Length"
	vGeneCol.spec.annotations["pl7.app/label"] = "vGene"
	weightCol.spec.annotations["pl7.app/label"] = "weight"

	columns := [cdr3LengthCol, vGeneCol, weightCol]
	
	tsv := xsv.exportFrame(columns, "tsv", {})


	runSpectratype := exec.builder().
		software(spectratype).
		addFile("input.tsv", tsv)
		
	if args.weight == "none" {
		runSpectratype = runSpectratype.arg("--unweighted")
	}

	runSpectratype = runSpectratype.
		saveStdoutContent().
		saveFile("result.tsv").
		run()

	spectratype := xsv.importFile(
		runSpectratype.getFile("result.tsv"),
		"tsv",
		{
			axes: [{
				column: "Sample",
				spec: weightCol.spec.axesSpec[0]
			}, {
				column: "vGene",
				spec: {
					name: "pl7.app/vdj/geneHit",
					type: "String",
					annotations: {
						"pl7.app/label": vGeneLabel
					},
					domain: vGeneCol.spec.domain
				}
			}, {
				column: "cdr3Length",
				spec: {
					name: "pl7.app/vdj/cdr3Length",
					type: "Int",
					annotations: {
						"pl7.app/label": cdr3LengthLabel
					},
					domain: cdr3LengthCol.spec.domain
				}
			}], 
			
			columns: [{
				column: "weight",
				spec: {
					name: "pl7.app/vdj/cdr3Spectratype",
					valueType: "Float",
					annotations: {
						"pl7.app/label": "CDR3 Spectratype"
					}
				}
			}],

			storageFormat: "Binary",
			partitionKeyLength: 1
		})
	
	return {
		outputs: {
			spectratype: pframes.exportFrame(spectratype)
		},

		exports: {
			spectratype: {
				data: spectratype["weight.data"],
				spec: spectratype["weight.spec"]
			}
		}
	}
})

