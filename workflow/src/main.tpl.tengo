// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

spectratype := assets.importSoftware("@platforma-open/milaboratories.cdr3-spectratype.software:main")

/**
	Returns a spec for the given type of spectratype.
	
	Args:
		type: The type of spectratype to return (cdr3 or v).
		abundanceSpec: The spec for the abundance column.
		vGeneSpec: The spec for the vGene column.
		cdr3Spec: The spec for the cdr3Length column.
	
	Returns:
		A spec for the given type of spectratype.
*/
getSpecs := func(type, abundanceSpec, vGeneSpec, cdr3Spec) {
	if type != "v" && type != "cdr3" {
		ll.panic("Invalid type: " + type)
	}

	spectratypeType := "pl7.app/vdj/" + type + "Spectratype"
	secondAxis := undefined
	label := undefined

	if type == "v" {
		label = "CDR3 V Spectratype"
		secondAxis = {
			column: "vGene",
			spec: {
				name: vGeneSpec.name,
				type: "String",
				annotations: {
					"pl7.app/label": vGeneSpec.annotations["pl7.app/label"]
				},
				domain: vGeneSpec.domain
			}
		}
	} else if type == "cdr3" {
		label = "CDR3 Spectratype"
		secondAxis = {
			column: "CDR3",
			spec: {
				name: "pl7.app/vdj/cdr3",
				type: "String",
				annotations: {
					"pl7.app/label": cdr3Spec.annotations["pl7.app/label"]
				},
				domain: cdr3Spec.domain
			}
		}
	} else {
		ll.panic("Invalid type: " + type)
	}
	return {
		axes: [
			{
				column: "Sample",
				spec: abundanceSpec.axesSpec[0]
			}, 
			{
				column: "cdr3Length",
				spec: {
					name: "pl7.app/vdj/cdr3Length",
					type: "Int",
					annotations: {
						"pl7.app/label": cdr3Spec.annotations["pl7.app/label"] + " length"
					},
					domain: cdr3Spec.domain
				}
			},
			secondAxis
			], 
			
		columns: [
			{
				column: "sum",
				spec: {
					name: spectratypeType,
					valueType: "Float",
					domain: {
						"pl7.app/vdj/cdr3Spectratype/type": "weighted",
						"pl7.app/abundance/unit": abundanceSpec.annotations["pl7.app/abundance/unit"]
					},
					annotations: {
						"pl7.app/label": label
					}
				}
			},
			{
				column: "size",
				spec: {
					name: spectratypeType,
					valueType: "Float",
					domain: {
						"pl7.app/vdj/cdr3Spectratype/type": "unweighted"
					},
					annotations: {
						"pl7.app/label": label + " (unweighted)"
					}
				}
			}],

		storageFormat: "Binary",
		partitionKeyLength: 1
	}
}

wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()

	bundleBuilder.addAnchor("main", args.cdr3Ref) // PlRef
	bundleBuilder.addById(args.abundanceRef) // SUniversalPColumnId
	bundleBuilder.addById(args.vGeneRef) // SUniversalPColumnId

	return  { 
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {
	columns := args.columns

	cdr3LengthSpec := columns.getSpec(args.cdr3Ref)
	abundanceSpec := columns.getSpec(args.abundanceRef)
	vGeneSpec := columns.getSpec(args.vGeneRef)

	table := columns.xsvTableBuilder()

	table.setAxisHeader("pl7.app/sampleId", "Sample")
	table.add(args.cdr3Ref, {header: "CDR3"})
	table.add(args.abundanceRef, {header: "weight"})
	table.add(args.vGeneRef, {header: "vGene"})
	tsv := table.build("tsv")

	runSpectratype := exec.builder().
		software(spectratype).
		addFile("input.tsv", tsv)
		
	if args.abundanceRef == "unweighted" {
		runSpectratype = runSpectratype.arg("--unweighted")
	}

	runSpectratype = runSpectratype.
		saveFile("vSpectratype.result.tsv").
		saveFile("cdr3Spectratype.result.tsv").
		run()

	vSpectratype := xsv.importFile(
		runSpectratype.getFile("vSpectratype.result.tsv"),
		"tsv",
		getSpecs("v", abundanceSpec, vGeneSpec, cdr3LengthSpec),
		{splitDataAndSpec: true}
	)

	cdr3Spectratype := xsv.importFile(
		runSpectratype.getFile("cdr3Spectratype.result.tsv"),
		"tsv",
		getSpecs("cdr3", abundanceSpec, vGeneSpec, cdr3LengthSpec),
		{splitDataAndSpec: true}
	)

	pf := pframes.pFrameBuilder()
	for id, v in vSpectratype {
		pf.add(id + "-v", v.spec, v.data)
	}
	for id, v in cdr3Spectratype {
		pf.add(id + "-cdr3", v.spec, v.data)
	}
	pf = pf.build()

	return {
		outputs: {
			pf: pframes.exportFrame(pf)
		},

		exports: {
			pf: pf
		}
	}
})

